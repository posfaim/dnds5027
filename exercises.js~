
// exercises and examples
// examples are a subcase of exercises
var editors = [];
var exercises = document.getElementsByClassName("exercise");
for (var i = 0; i < exercises.length; i++) {
    const ta = exercises[i].getElementsByTagName('textarea')[0];
    const out = exercises[i].getElementsByClassName('output')[0];
    
    var buttons = exercises[i].getElementsByTagName('button');
    const but   = buttons[0];
    
    // Turn the textarea into a Python editor
    const editor = CodeMirror.fromTextArea(ta, {
    mode: "python",
    theme: "default",
    lineNumbers: true,
    indentUnit: 4,
    matchBrackets: true,
    lineWrapping: false,
    extraKeys: {
      "Shift-Enter": function(cm) {
        runCode(editor, out);   // üöÄ run code when Shift+Enter is pressed
      },
      Tab(cm) {
      const n = cm.getOption("indentUnit");
        cm.replaceSelection(" ".repeat(n), "end");
      },
      "Shift-Tab": "indentLess"
    }
    });
    
    if (exercises[i].hasAttribute("example")) {
        if (! (exercises[i].hasAttribute("noneditable"))){
            editor.setOption("readOnly", "true");
        }
        editor.setSize(null, (editor.lineCount()+.7) * editor.defaultTextHeight());
    } else {
        if (ta.hasAttribute("linecount")) {
            editor.setSize(null, (Number(ta.getAttribute("linecount"))+.7) * editor.defaultTextHeight());
        } else {
            editor.setSize(null, 6 * editor.defaultTextHeight());
        }
    }
    but.addEventListener("click", () => runCode(editor, out));
    
    // Reset button
    if (buttons.length > 1){
        buttons[1].addEventListener("click", () => {
            editor.setValue(ta.value);   // restore original text
            out.textContent = "";        // clear output
        });
    }
    editors.push(editor);
}

// solutions of exercises
// we cannot run them
var solutions = document.getElementsByClassName("solution");
for (var i = 0; i < solutions.length; i++) {
    // Turn the textarea into a Python editor
    const sol = CodeMirror.fromTextArea(solutions[i], {
    mode: "python",
    theme: "default",
    lineNumbers: true,
    indentUnit: 4,
    matchBrackets: true,
    lineWrapping: false
    });
    sol.setOption("readOnly", "true");
    
    sol.setSize(null, (sol.lineCount()+.7) * sol.defaultTextHeight());
}

// numbering exercises
var n=1
for (var i = 0; i < exercises.length; i++) {
    if (!exercises[i].hasAttribute("example") ) {
        const h = exercises[i].querySelector("h2");
        if (h) {
            h.textContent = "Exercise "+String(n).padStart(2, "0")+" -- "+h.textContent;
            n = n+1;
        }
    }
}

let pyodide = null;

  async function loadPyodideAndPackages() {
    pyodide = await loadPyodide();
    document.getElementById("loading").textContent = "‚úÖ";
    //await pyodide.loadPackage("numpy");
    pyodide.runPython(`
    import builtins
    from js import prompt
    builtins.input = lambda msg="": prompt(msg)
    `)
  
    for (var i = 0; i < exercises.length; i++) {
        var but = exercises[i].getElementsByTagName('button')[0];
        if (but) but.disabled = false;
    }
    
  }


  async function runCode(editor, output) {
    const code = editor.getValue().trim();
    
    // If empty, just clear output and return
    if (!code) {
        output.textContent = "";
        return;
    }
    
    const wrappedCode = `
import sys
import io
import traceback

sys.stdout = io.StringIO()
sys.stderr = sys.stdout

${code.split("\n").map(line => line).join("\n")}
sys.stdout.getvalue()
    `;

    try {
      const result = await pyodide.runPythonAsync(wrappedCode);
      output.textContent = result;
    } catch (err) {
      output.textContent = "‚ùå" + err;
    }
  }

  
  loadPyodideAndPackages();
/* 
for (let i = 0; i < exercises.length; i++) {
    const but = exercises[i].getElementsByTagName('button')[0];
    const out = exercises[i].getElementsByClassName('output')[0];

    but.addEventListener("click", () => runCode(editors[i], out));
}
*/    

